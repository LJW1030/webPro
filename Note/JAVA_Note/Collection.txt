Collection

쉽게 말해서 배열과 다소 비슷하다고 생각하자. 
어떠한 자료를 나중에 재활용하기 위해서 우리는 데이터를 차곡차곡 잘 정리해서 저장해 두어야 한다. 
정리할 때 데이터의 속성에 맞춰서 저장해야 하므로 자료구조가 여러 가지 존재할 수 있다. 
이러한 자료구조들을 collections라고 한다.

List계열 Collection 클래스 살펴보기
자료구조 중 장 많이 사용하고 쉽게 사용할 수 있는 자료구조형이 List계열입니다.
List는 배열과 비슷하지만, 배열의 단점을 보완하였습니다.
List는 처음 만들 때 크기를 고정하지 않아도 되고 그 크기는 유동적입니다
	ArrayList ; 배열과 매우 비슷. 인덱스가 존재하며 데이터는 중복을 허용. 인덱스가 가장 중요
-	add(객체)
-	add(index, 객체)
-	set(index, 객체)
-	get(index)
-	size()
-	remove(index)
-	remove(객체)
-	contains(객체) 주어진 객체가 저장되어 있는지 여부를 boolean 값으로 반환
-	isEmpty()
-	clear()

	Vector ; 

Map 계열 Collection 클래스 살펴보기
Map계열의 자료구조는 인덱스 대신 키 값으로 데이터를 액세스합니다.
List계열과 달리 인덱스가 없고, 키와 값만 있습니다. 그리고 키는 유니크 해야 합니다.
우리가 값을 관리하고자 한다면 키를 이용해서 값을 관리할 수 있습니다. 

Set 계열 Collection 클래스 살펴보기
Set계열 자료구조에서는 데이터의 순서는 없습니다(인덱스 없다). 하지만 중복된 데이터는 허락하지 않습니다.
중복된 데이터의 의미는 hashcode()값이 같거나 equal()메소드의 결과값에 의해 해석

JAVA에서는 Iterator라는 인터페이스가 있습니다. 
Iterator라는 의미는 ‘반복자＇라는 의미로 데이터를 반복적으로 검색하는데 아주 유용한 인터페이스 입니다. 
참고로 모든 자료구조형은 iterator() 메소드를 지원 하고 있습니다.

	특 징
List	순서가 있는 데이터의 집합, 데이터의 중복을 허용한다
	ex. 대기자명단
	구현클래스 : ArrayList, LinkedList, Stack, Vector 등
Set	순서를 유지하지 않는 데이터의 집합. 데이터의 중복을 허용하지 않는다.
	구현클래스 : HashSet, TreeSet 등
Map	키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합
	순서는 유지되지 않으며, 키는 중복을 허용하지 않고 값은 중복을 허용한다
	구현클래스 : HashMap, HashTable 등


인터페이스
인터페이스란?
	① 작업명세서(작업지시서) - "앞으로 이렇게 만들어요"라고 표현해 놓은 것
	  - 실제 구현된 것이 전혀 없는 기본 설계도.
	  - 객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다
	  - 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다
	  - 추상메서드와 상수 만을 멤버로 가질 수 있다.
	② 다형성을 가능하게 한다(하나의 객체를 다양하게 많은 type으로 만들 수 있다).
	③ 객체를 부속품화 -다양한 객체를 제품의 부속품처럼 개발자 마음대로 변경 할 수 있다.
	④ 사용법은 어렵지 않지만, 실제 개발에 적용시키기는 쉽지 않다.
	⑤ 인터페이스를 공부하는데 가장 좋은 방법은 패턴이나 프레임워크(ex. Spring)를 통해 습득하는 것
	⑥ 객체와 객체 간의 소통 수단

인터페이스 문법
	⑴ 'class'대신 'interface' 예약어를 사용한다는 점에서 클래스와 유사
 	 ⑵ 실제 구현된 기능 없이 추상메소드와 상수만이 존재
	public interface 인터페이스이름 {
		public static final 타입 상수이름 = 값;
		public abstract 메서드 이름(매개변수 목록);  //구현된 메소드는 가질 수 없다
	}
	☞모든 멤버변수는 public static final이어야하며 static final은 생략할 수 있다.'
	  모든 메서드는 public abstract 이어야 하며, abstract를 생략할 수 있다.
 	⑵ private는 불가  - 상수나 메소드를 만들 때 private 접근 제한자는 불가
	⑶ 변수 타입 - 인터페이스는 객체를 생성할 수 없다. 다만, 변수 타입으로만 사용 된다.
		(예외, 익명 구현 객체만이 가능은 하다. 안드로이드에서 주로)
  	⑷ 구현은 Implement 되는 클래스에서 한다.

오버로딩 vs. 오버라이딩
	오버로딩(overloading) : 컴파일러 입장에서는 기존에 없는 새로운 메서드를 정의하는 것(new)
			메소드 다중정의 (같은 class에서 동일한 메소드가 매개변수를 달리 여러 개 존재
	오버라이딩(overriding): 상속받은 메서드의 내용을 변경하는 것(change, modify)
			메소드 재정의 : 부모클래스와 자식클래스에 동일한 method 존재(틀만 가져와 재정의)

인터페이스의 장점

⑴	 개발시간을 단축시킬 수 있다.
일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다. 그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
⑵	표준화가 가능하다
프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다
⑶	서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
서로 상속 관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다
⑷	독립적인 프로그래밍이 가능하다
인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.

추상클래스는 일반 클래스와 동일하게 변수, 메소드의 모든 기능을 사용할 수 있지만, 인터페이스는 상수와 추상메소드만이 존재 한다.

io(입출력)

I/O란? 
입력(Input)과 출력(Output)을 뜻 한다. 
프로그램에게 입력하는 것은 Input이며, 
프로그램에서 어떤 것을 출력하는 것을 Output이라고 한다.
(1)	Input : 파일 데이터를 읽는다. 키보드의 데이터를 읽는다. 네트워크상의 데이터를 읽는다(전송)
(2)	Output :파일에 데이터를 쓴다. 모니터에 데이터를 쓴다(출력). 네트워크상에 데이터를 쓴다(전송)

Java에서의 파일입출력 API
(1)	InputStream : 1byte단위 입력 API. 이미지, 동영상 등의 데이터에 주로 사용
(2)	OutputStream : 1byte단위 출력 API. 이미지, 동영상 등의 데이터에 주로 사용
(3)	Reader : 2byte단위 입력 API. 문자열에 주로 사용
(4)	Writer : 2byte단위 출력 API. 문자열에 주로 사용

스트림(Stream)이란 데이터를 운반(입출력)하는데 사용되는 연결통로. 연속적인 데이터의 흐름을 물(stream)에 비유해서 붙여진 이름. 하나의 스트림으로 입출력을 동시에 수행할 수 없다(단방향통신). 입출력을 동시에 수행하려면 2개의 스트림이 필요하다
①	파일로부터 데이터를 읽는 3단계 : 파일(연결통로)을 연다 -> 파일의 데이터를 읽는다(필요한 만큼 반복) -> 파일을 닫는다
②	파일에 데이터를 쓰는 3단계 : 파일(연결통로)을 연다 -> 파일에 데이터를 쓴다 -> 파일을 닫는다

(1)	InputStream 사용법
①	InputStream(추상) 클래스를 상속받은 여러 가지 API 하위 클래스 중의 하나를 이용해서 객체를 만든다. 또는 다른 클래스의 메소드에서 반환(리턴)되는 타입 객체를 얻는다.
②	read(), read(byte[]) 두 개의 메소드를 이용하여 데이터를 읽는다.
i.	read() 1byte씩 읽는다. 속도가 느리다
ii.	read(byte[]) byte[]만큼씩 읽는다. 속도가 빠르다.
③	예외 처리와 무조건 close() 실행
i.	I/O를 하면서 반드시 해야 하는 예외처리가 있습니다. IOException입니다. 반드시 하도록 컴파일러가 강요합니다
ii.	I/O 작업 마지막은 close()로 외부 연결을 끝내야 합니다

(2)	OutputStream 사용법
①	OutputStream(추상) 클래스를 상속받은 여러가지 API 하위 클래스들 중의 하나를 이용해서 객체를 만든다. 또는 다른 클래스의 메소드에서 반환(리턴)되는 타입 객체를 얻는다.
②	write()메소드를 이용해서 데이터를 읽으면 됩니다.
③	write(int), write(byte[]), write(byte[], int, int) 세개의 메소드를 이용할 수 있습니다.
④	예외 처리와 무조건 close() 실행
i.	I/O를 하면서 반드시 해야 하는 예외처리가 있습니다. IOException입니다. 반드시 하도록 컴파일러가 강요합니다
ii.	I/O 작업 마지막은 close()로 외부 연결을 끝내야 합니다

객체지향의 등장 배경과 이해
   - 메소드를 이용한 방식으로 개발자들은 아주 많은 효율성을 느끼게 되었다. 하지만, 메소드를 이용한 방식에도 한계는 있었다.
   - 데이터가 많아지고, 메소드가 많아짐에 따라 코드의 양이 많이 지고, 어려워지기 시작했다. 그리하여, 등장한 방식이 객체지향 프로그래밍 이다.
   - 객체란 동일한 성질의 데이터와 메소드를 한곳에 모아두고 필요한 곳에서 언제든지 이용할 수 있게 만들어 놓은 덩어리다. 

메소드의 이해
메소드란? 작업을 수행하기 위한 명령문의 집합
어떤 값을 입력받아서 처리하고 그 결과를 돌려준다(입력 받는 값이 없을 수도 있고 결과를 돌려주지 않을 수도 있다.)
메소드의 장점과 작성지침 ; 반복적으로 수행되는 여러 문장을 메소드로 작성한다.

2.	객체의 개념 및 클래스의 이해
-	객체는 같은 종류의 데이터와 메소드가 함께 있는 구성체입니다.
-     	객체는 메소드와 비슷하지만 그 상위개념이라고 할 수 있습니다. 즉 완전한 독립체라고 할 수 있습니다.

객체와 클래스
	기계를 만들 때 설계를 하고 설계도면대로 기계를 제작하듯이, 객체의 설계도면인 클래스를 만들고 객체를 생성한다..
	클래스는 객체를 만들기 위한 설계도라고 할 수 있다.
객체 자료형과 변수와의 관계
-	기초 데이터 변수는 메모리상에 무엇이든 담을 수 있는 주머니를 만들어 놓고 주머니에 값을 직접 넣는다

클래스 재작
①	패키지명
②	클래스명
③	데이터(인스턴스 변수=멤버변수, 필드) : 이 데이터는 생성자나 setter를 이용해서 초기화하지 않으면 객체는 null, 숫자는 0, boolean은 false로 초기화되어 들어간다
④	생성자함수 : 클래스명과 똑같이 리턴타입이 없는 메소드를 생성자라 하며 처음 클래스형 객체를 만들때 호출된다. 모든 클래스는 반드시 하나 이상의 생성자가 있어야 한다. 만약 하나도 없으면 JVM이 디폴트 생성자를 만들어 준다(new 연산자로 호출되는 메서드)
⑤	메소드
⑥	Getter & setter

생성자의 이해 : 생성자는 매개변수 있는 생성자와 매개변수 없는 생성자 등 여러 종류의 생성자를 가질 수 있다. 
             생성자가 없을 때는 디폴트 생성자가 컴파일러 단계에서 자동 생성한다. 
             한 개 이상의 생성자가 있으면 디폴트 생성자는 자동 생성되지 않는다.
. this키워드의 이해
  this란 객체자신
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

객체지향 프로그래밍의 특징
(1) 캡슐화와 데이터은닉
(2) 다형성 : 같은 모습이지만 다른 기능 cf.오버로딩
(3) 상속
